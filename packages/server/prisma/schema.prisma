// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id                    String    @id @default(cuid())
  username              String    @unique
  email                 String    @unique
  firstName             String
  lastName              String
  displayName           String
  avatar                String?
  passwordHash          String
  status                UserStatus @default(ACTIVE)
  role                  UserRole   @default(VIEWER)
  isEmailVerified       Boolean   @default(false)
  isPhoneVerified       Boolean   @default(false)
  lastLoginAt           DateTime?
  lastLoginIp           String?
  failedLoginAttempts   Int       @default(0)
  lockedUntil           DateTime?
  passwordChangedAt     DateTime  @default(now())
  passwordExpiresAt     DateTime?
  mfaEnabled            Boolean   @default(false)
  mfaType               MfaType?
  mfaSecret             String?
  backupCodes           String[]
  timezone              String    @default("UTC")
  locale                String    @default("en-US")
  companyId             String?
  department            String?
  position              String?
  employeeId            String?
  hireDate              DateTime?
  terminationDate       DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdBy             String
  updatedBy             String
  isDeleted             Boolean   @default(false)
  version               Int       @default(1)

  // Relations
  company               Company?  @relation(fields: [companyId], references: [id])
  refreshTokens         RefreshToken[]
  journalEntries        JournalEntry[]
  invoices              Invoice[]
  bills                 Bill[]
  payments              Payment[]
  customers             Customer[]
  vendors               Vendor[]
  managedProjects       Project[] @relation("ProjectManager")
  createdProjects       Project[] @relation("ProjectCreator")
  updatedProjects       Project[] @relation("ProjectUpdater")
  costCenters           CostCenter[]
  notificationSettings  UserNotificationSettings?

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  legalName   String?
  taxId       String?
  address     Json?
  phone       String?
  email       String?
  website     String?
  logo        String?
  defaultCurrency String @default("USD")
  fiscalYearStart String @default("01-01")
  taxRate     Decimal? @db.Decimal(10, 4)
  invoicePrefix String @default("INV")
  billPrefix  String @default("BILL")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  users       User[]
  chartOfAccounts ChartOfAccount[]
  journalEntries JournalEntry[]
  invoices   Invoice[]
  bills      Bill[]
  payments   Payment[]
  customers  Customer[]
  vendors    Vendor[]
  projects   Project[]
  costCenters CostCenter[]
  taxCodes   TaxCode[]
  securitySettings CompanySecuritySettings?
  dataBackups DataBackup[]

  @@map("companies")
}

// ============================================================================
// AUTHENTICATION
// ============================================================================

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ============================================================================
// CHART OF ACCOUNTS
// ============================================================================

model ChartOfAccount {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  type        AccountType
  category    AccountCategory
  parentId    String?
  companyId   String
  isActive    Boolean  @default(true)
  description String?
  balance     Decimal  @default(0) @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  parent      ChartOfAccount? @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    ChartOfAccount[] @relation("AccountHierarchy")
  journalEntryLines JournalEntryLine[]

  @@map("chart_of_accounts")
}

// ============================================================================
// JOURNAL ENTRIES
// ============================================================================

model JournalEntry {
  id          String   @id @default(cuid())
  number      String   @unique
  date        DateTime
  reference   String?
  description String
  status      JournalEntryStatus @default(DRAFT)
  companyId   String
  createdBy   String
  approvedBy  String?
  approvedAt  DateTime?
  postedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  user        User    @relation(fields: [createdBy], references: [id])
  lines       JournalEntryLine[]

  @@map("journal_entries")
}

model JournalEntryLine {
  id              String   @id @default(cuid())
  journalEntryId  String
  accountId       String
  debit           Decimal  @default(0) @db.Decimal(15, 2)
  credit          Decimal  @default(0) @db.Decimal(15, 2)
  description     String?
  reference       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account         ChartOfAccount @relation(fields: [accountId], references: [id])

  @@map("journal_entry_lines")
}

// ============================================================================
// INVOICES & BILLS
// ============================================================================

model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  type        InvoiceType
  date        DateTime
  dueDate     DateTime?
  customerId  String?
  vendorId    String?
  status      InvoiceStatus @default(DRAFT)
  subtotal    Decimal  @default(0) @db.Decimal(15, 2)
  taxAmount   Decimal  @default(0) @db.Decimal(15, 2)
  discountAmount Decimal @default(0) @db.Decimal(15, 2)
  total       Decimal  @default(0) @db.Decimal(15, 2)
  notes       String?
  terms       String?
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  vendor      Vendor? @relation(fields: [vendorId], references: [id])
  user        User    @relation(fields: [createdBy], references: [id])
  items       InvoiceItem[]
  payments    Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal  @default(1) @db.Decimal(10, 3)
  unitPrice   Decimal  @default(0) @db.Decimal(15, 2)
  taxRate     Decimal  @default(0) @db.Decimal(5, 2)
  taxAmount   Decimal  @default(0) @db.Decimal(15, 2)
  discountRate Decimal @default(0) @db.Decimal(5, 2)
  discountAmount Decimal @default(0) @db.Decimal(15, 2)
  total       Decimal  @default(0) @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Bill {
  id          String   @id @default(cuid())
  number      String   @unique
  date        DateTime
  dueDate     DateTime?
  vendorId    String
  status      BillStatus @default(DRAFT)
  subtotal    Decimal  @default(0) @db.Decimal(15, 2)
  taxAmount   Decimal  @default(0) @db.Decimal(15, 2)
  discountAmount Decimal @default(0) @db.Decimal(15, 2)
  total       Decimal  @default(0) @db.Decimal(15, 2)
  notes       String?
  terms       String?
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  vendor      Vendor  @relation(fields: [vendorId], references: [id])
  user        User    @relation(fields: [createdBy], references: [id])
  items       BillItem[]
  payments    Payment[]

  @@map("bills")
}

model BillItem {
  id          String   @id @default(cuid())
  billId      String
  description String
  quantity    Decimal  @default(1) @db.Decimal(10, 3)
  unitPrice   Decimal  @default(0) @db.Decimal(15, 2)
  taxRate     Decimal  @default(0) @db.Decimal(5, 2)
  taxAmount   Decimal  @default(0) @db.Decimal(15, 2)
  discountRate Decimal @default(0) @db.Decimal(5, 2)
  discountAmount Decimal @default(0) @db.Decimal(15, 2)
  total       Decimal  @default(0) @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bill        Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)

  @@map("bill_items")
}

// ============================================================================
// CUSTOMERS & VENDORS
// ============================================================================

model Customer {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  email       String?
  phone       String?
  address     Json?
  taxId       String?
  creditLimit Decimal  @default(0) @db.Decimal(15, 2)
  balance     Decimal  @default(0) @db.Decimal(15, 2)
  isActive    Boolean  @default(true)
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  user        User    @relation(fields: [createdBy], references: [id])
  invoices    Invoice[]
  payments    Payment[]
  projects    Project[]

  @@map("customers")
}

model Vendor {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  email       String?
  phone       String?
  address     Json?
  taxId       String?
  creditLimit Decimal  @default(0) @db.Decimal(15, 2)
  balance     Decimal  @default(0) @db.Decimal(15, 2)
  isActive    Boolean  @default(true)
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  user        User    @relation(fields: [createdBy], references: [id])
  invoices    Invoice[]
  bills       Bill[]
  payments    Payment[]

  @@map("vendors")
}

// ============================================================================
// PAYMENTS
// ============================================================================

model Payment {
  id          String   @id @default(cuid())
  number      String   @unique
  date        DateTime
  type        PaymentType
  method      PaymentMethod
  amount      Decimal  @default(0) @db.Decimal(15, 2)
  reference   String?
  notes       String?
  invoiceId   String?
  billId      String?
  customerId  String?
  vendorId    String?
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  invoice     Invoice? @relation(fields: [invoiceId], references: [id])
  bill        Bill? @relation(fields: [billId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  vendor      Vendor? @relation(fields: [vendorId], references: [id])
  user        User    @relation(fields: [createdBy], references: [id])

  @@map("payments")
}

// ============================================================================
// PROJECTS & COST CENTERS
// ============================================================================

model Project {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  budget      Decimal  @default(0) @db.Decimal(15, 2)
  hourlyRate  Decimal? @db.Decimal(15, 2)
  customerId  String
  managerId   String?
  notes       String?
  companyId   String
  createdBy   String
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
  manager     User? @relation("ProjectManager", fields: [managerId], references: [id])
  creator     User @relation("ProjectCreator", fields: [createdBy], references: [id])
  updater     User @relation("ProjectUpdater", fields: [updatedBy], references: [id])

  @@map("projects")
}

model CostCenter {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  parentId    String?
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  parent      CostCenter? @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  children    CostCenter[] @relation("CostCenterHierarchy")
  user        User    @relation(fields: [createdBy], references: [id])

  @@map("cost_centers")
}

// ============================================================================
// ============================================================================
// SETTINGS & CONFIGURATION
// ============================================================================

model TaxCode {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  rate        Decimal  @db.Decimal(10, 4)
  isActive    Boolean  @default(true)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String

  // Relations
  company     Company  @relation(fields: [companyId], references: [id])

  @@map("tax_codes")
}

model CompanySecuritySettings {
  id                           String   @id @default(cuid())
  companyId                    String   @unique
  passwordMinLength            Int      @default(8)
  passwordRequireUppercase     Boolean  @default(true)
  passwordRequireLowercase     Boolean  @default(true)
  passwordRequireNumbers       Boolean  @default(true)
  passwordRequireSpecialChars  Boolean  @default(true)
  passwordExpirationDays       Int      @default(90)
  sessionTimeout               Int      @default(30)
  mfaRequired                  Boolean  @default(false)
  ipWhitelist                 String[]
  failedLoginAttempts          Int      @default(5)
  accountLockoutDuration       Int      @default(15)
  auditLogging                 Boolean  @default(true)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  // Relations
  company                      Company  @relation(fields: [companyId], references: [id])

  @@map("company_security_settings")
}

model UserNotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(false)
  invoiceReminders      Boolean  @default(true)
  billReminders         Boolean  @default(true)
  paymentConfirmations  Boolean  @default(true)
  overdueAlerts         Boolean  @default(true)
  reportDelivery        Boolean  @default(false)
  securityAlerts        Boolean  @default(true)
  reminderFrequency     String   @default("weekly")
  quietHoursEnabled     Boolean  @default(false)
  quietHoursStart       String?  @default("22:00")
  quietHoursEnd         String?  @default("08:00")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id])

  @@map("user_notification_settings")
}

model DataBackup {
  id          String   @id @default(cuid())
  companyId   String
  filename    String
  size        String
  status      String   @default("IN_PROGRESS")
  filePath    String?
  downloadUrl String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  createdBy   String

  // Relations
  company     Company  @relation(fields: [companyId], references: [id])

  @@map("data_backups")
}

// ENUMS
// ============================================================================

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_ACTIVATION
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
  BOOKKEEPER
  MANAGER
  VIEWER
}

enum MfaType {
  TOTP
  SMS
  EMAIL
  BACKUP_CODES
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum AccountCategory {
  CURRENT_ASSETS
  FIXED_ASSETS
  CURRENT_LIABILITIES
  LONG_TERM_LIABILITIES
  EQUITY
  OPERATING_REVENUE
  OPERATING_EXPENSE
  NON_OPERATING_REVENUE
  NON_OPERATING_EXPENSE
}

enum JournalEntryStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  POSTED
  VOIDED
}

enum InvoiceType {
  SALE
  PURCHASE
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  VOIDED
}

enum BillStatus {
  DRAFT
  RECEIVED
  APPROVED
  PAID
  OVERDUE
  VOIDED
}

enum PaymentType {
  RECEIVED
  SENT
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  OTHER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}
