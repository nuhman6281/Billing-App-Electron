// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// BASE MODELS
// ============================================================================

model BaseEntity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String
  isDeleted Boolean  @default(false)
  version   Int      @default(1)

  @@map("base_entities")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id                    String    @id @default(cuid())
  username              String    @unique
  email                 String    @unique
  firstName             String
  lastName              String
  displayName           String
  avatar                String?
  passwordHash          String
  status                UserStatus @default(ACTIVE)
  role                  UserRole   @default(VIEWER)
  isEmailVerified       Boolean   @default(false)
  isPhoneVerified       Boolean   @default(false)
  lastLoginAt           DateTime?
  lastLoginIp           String?
  failedLoginAttempts   Int       @default(0)
  lockedUntil           DateTime?
  passwordChangedAt     DateTime  @default(now())
  passwordExpiresAt     DateTime?
  mfaEnabled            Boolean   @default(false)
  mfaType               MfaType?
  mfaSecret             String?
  backupCodes           String[]
  timezone              String    @default("UTC")
  locale                String    @default("en-US")
  companyId             String?
  department            String?
  position              String?
  employeeId            String?
  hireDate              DateTime?
  terminationDate       DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdBy             String
  updatedBy             String
  isDeleted             Boolean   @default(false)
  version               Int       @default(1)

  // Relations
  company               Company?  @relation(fields: [companyId], references: [id])
  sessions              UserSession[]
  auditLogs             AuditLog[]
  journalEntries        JournalEntry[]
  invoices              Invoice[]
  bills                 Bill[]
  payments              Payment[]
  customers             Customer[]
  vendors               Vendor[]
  projects              Project[]
  costCenters           CostCenter[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Permission[]
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  isDeleted   Boolean  @default(false)
  version     Int      @default(1)

  // Relations
  users       User[]

  @@map("roles")
}

model UserSession {
  id            String        @id @default(cuid())
  userId        String
  sessionId     String        @unique
  tokenId       String        @unique
  refreshTokenId String       @unique
  status        SessionStatus @default(ACTIVE)
  ipAddress     String
  userAgent     String
  deviceType    String
  browser       String
  browserVersion String
  operatingSystem String
  operatingSystemVersion String
  deviceModel   String?
  deviceManufacturer String?
  lastActivityAt DateTime     @default(now())
  expiresAt     DateTime
  revokedAt     DateTime?
  revokedBy     String?
  revokedReason String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String
  updatedBy     String
  isDeleted     Boolean       @default(false)
  version       Int           @default(1)

  // Relations
  user          User          @relation(fields: [userId], references: [id])

  @@map("user_sessions")
}

// ============================================================================
// COMPANY & ORGANIZATION
// ============================================================================

model Company {
  id                String   @id @default(cuid())
  name              String
  legalName         String?
  taxId             String?
  registrationNumber String?
  website           String?
  phone             String?
  email             String?
  address           Json?
  logo              String?
  currency          String   @default("USD")
  timezone          String   @default("UTC")
  locale            String   @default("en-US")
  fiscalYearStart   DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean  @default(false)
  version           Int      @default(1)

  // Relations
  users             User[]
  chartOfAccounts   ChartOfAccount[]
  journalEntries    JournalEntry[]
  invoices          Invoice[]
  bills             Bill[]
  customers         Customer[]
  vendors           Vendor[]
  projects          Project[]
  costCenters       CostCenter[]
  taxCodes          TaxCode[]

  @@map("companies")
}

// ============================================================================
// CHART OF ACCOUNTS
// ============================================================================

model ChartOfAccount {
  id                String           @id @default(cuid())
  companyId         String
  accountCode       String
  accountName       String
  accountType       AccountType
  accountCategory   AccountCategory
  parentAccountId   String?
  description       String?
  isActive          Boolean          @default(true)
  isSystem          Boolean          @default(false)
  openingBalance    Decimal          @default(0) @db.Decimal(15, 2)
  currentBalance    Decimal          @default(0) @db.Decimal(15, 2)
  currency          String           @default("USD")
  taxCode           String?
  allowManualEntries Boolean          @default(true)
  requireApproval   Boolean          @default(false)
  sortOrder         Int              @default(0)
  level             Int              @default(0)
  path              String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean          @default(false)
  version           Int              @default(1)

  // Relations
  company           Company          @relation(fields: [companyId], references: [id])
  parentAccount     ChartOfAccount?  @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  childAccounts     ChartOfAccount[] @relation("AccountHierarchy")
  journalEntryLines JournalEntryLine[]
  invoiceItems      InvoiceItem[]
  billItems         BillItem[]
  taxCodeRef        TaxCode?         @relation(fields: [taxCode], references: [id])

  @@unique([companyId, accountCode])
  @@map("chart_of_accounts")
}

// ============================================================================
// JOURNAL ENTRIES
// ============================================================================

model JournalEntry {
  id                  String              @id @default(cuid())
  companyId           String
  documentNumber      String              @unique
  entryDate           DateTime
  postingDate         DateTime
  status              JournalEntryStatus  @default(DRAFT)
  entryType           String
  reference           String?
  notes               String?
  isRecurring         Boolean             @default(false)
  recurringPattern    Json?
  isReversed          Boolean             @default(false)
  reversedEntryId     String?
  approvalStatus      String              @default("PENDING")
  approvedBy          String?
  approvedAt          DateTime?
  totalDebit          Decimal             @db.Decimal(15, 2)
  totalCredit         Decimal             @db.Decimal(15, 2)
  currency            String              @default("USD")
  exchangeRate        Decimal             @default(1) @db.Decimal(10, 6)
  baseCurrencyAmount  Decimal             @db.Decimal(15, 2)
  tags                String[]
  attachments         String[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdBy           String
  updatedBy           String
  isDeleted           Boolean             @default(false)
  version             Int                 @default(1)

  // Relations
  company             Company             @relation(fields: [companyId], references: [id])
  lines               JournalEntryLine[]
  auditLogs           AuditLog[]
  reversedEntry       JournalEntry?       @relation("JournalEntryReversal", fields: [reversedEntryId], references: [id])
  reversals           JournalEntry[]      @relation("JournalEntryReversal")

  @@map("journal_entries")
}

model JournalEntryLine {
  id            String   @id @default(cuid())
  journalEntryId String  @id
  accountId     String
  description  String
  debitAmount  Decimal  @default(0) @db.Decimal(15, 2)
  creditAmount Decimal  @default(0) @db.Decimal(15, 2)
  taxAmount    Decimal  @default(0) @db.Decimal(15, 2)
  taxCode      String?
  projectId    String?
  costCenterId String?
  reference    String?
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String
  isDeleted    Boolean  @default(false)
  version      Int      @default(1)

  // Relations
  journalEntry JournalEntry    @relation(fields: [journalEntryId], references: [id])
  account      ChartOfAccount  @relation(fields: [accountId], references: [id])
  project      Project?        @relation(fields: [projectId], references: [id])
  costCenter   CostCenter?     @relation(fields: [costCenterId], references: [id])

  @@map("journal_entry_lines")
}

// ============================================================================
// INVOICES & BILLS
// ============================================================================

model Invoice {
  id                String        @id @default(cuid())
  companyId         String
  invoiceNumber     String        @unique
  invoiceDate       DateTime
  dueDate           DateTime
  status            InvoiceStatus  @default(DRAFT)
  customerId        String
  billingAddress    Json
  shippingAddress   Json?
  currency          String        @default("USD")
  exchangeRate      Decimal       @default(1) @db.Decimal(10, 6)
  subtotal          Decimal       @db.Decimal(15, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(15, 2)
  discountAmount    Decimal       @default(0) @db.Decimal(15, 2)
  totalAmount       Decimal       @db.Decimal(15, 2)
  paidAmount        Decimal       @default(0) @db.Decimal(15, 2)
  balanceAmount     Decimal       @db.Decimal(15, 2)
  paymentTerms      String
  notes             String?
  terms             String?
  reference         String?
  tags              String[]
  sentAt            DateTime?
  viewedAt          DateTime?
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean       @default(false)
  version           Int           @default(1)

  // Relations
  company           Company       @relation(fields: [companyId], references: [id])
  customer          Customer      @relation(fields: [customerId], references: [id])
  items             InvoiceItem[]
  payments          Payment[]
  auditLogs         AuditLog[]

  @@map("invoices")
}

model InvoiceItem {
  id            String   @id @default(cuid())
  invoiceId     String
  itemId        String?
  description  String
  quantity     Decimal  @db.Decimal(10, 3)
  unitPrice    Decimal  @db.Decimal(15, 2)
  discountPercent Decimal @default(0) @db.Decimal(5, 2)
  discountAmount Decimal @default(0) @db.Decimal(15, 2)
  taxAmount    Decimal  @default(0) @db.Decimal(15, 2)
  lineTotal    Decimal  @db.Decimal(15, 2)
  accountId    String
  projectId    String?
  costCenterId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String
  isDeleted    Boolean  @default(false)
  version      Int      @default(1)

  // Relations
  invoice      Invoice       @relation(fields: [invoiceId], references: [id])
  account      ChartOfAccount @relation(fields: [accountId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])
  costCenter   CostCenter?   @relation(fields: [costCenterId], references: [id])

  @@map("invoice_items")
}

model Bill {
  id                String        @id @default(cuid())
  companyId         String
  billNumber        String        @unique
  billDate          DateTime
  dueDate           DateTime
  status            InvoiceStatus  @default(DRAFT)
  vendorId          String
  currency          String        @default("USD")
  exchangeRate      Decimal       @default(1) @db.Decimal(10, 6)
  subtotal          Decimal       @db.Decimal(15, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(15, 2)
  discountAmount    Decimal       @default(0) @db.Decimal(15, 2)
  totalAmount       Decimal       @db.Decimal(15, 2)
  paidAmount        Decimal       @default(0) @db.Decimal(15, 2)
  balanceAmount     Decimal       @db.Decimal(15, 2)
  paymentTerms      String
  notes             String?
  terms             String?
  reference         String?
  purchaseOrderId   String?
  receiptId         String?
  tags              String[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean       @default(false)
  version           Int           @default(1)

  // Relations
  company           Company       @relation(fields: [companyId], references: [id])
  vendor            Vendor        @relation(fields: [vendorId], references: [id])
  items             BillItem[]
  payments          Payment[]
  auditLogs         AuditLog[]

  @@map("bills")
}

model BillItem {
  id            String   @id @default(cuid())
  billId        String
  itemId        String?
  description  String
  quantity     Decimal  @db.Decimal(10, 3)
  unitPrice    Decimal  @db.Decimal(15, 2)
  discountPercent Decimal @default(0) @db.Decimal(5, 2)
  discountAmount Decimal @default(0) @db.Decimal(15, 2)
  taxAmount    Decimal  @default(0) @db.Decimal(15, 2)
  lineTotal    Decimal  @db.Decimal(15, 2)
  accountId    String
  projectId    String?
  costCenterId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  updatedBy    String
  isDeleted    Boolean  @default(false)
  version      Int      @default(1)

  // Relations
  bill         Bill           @relation(fields: [billId], references: [id])
  account      ChartOfAccount @relation(fields: [accountId], references: [id])
  project      Project?       @relation(fields: [projectId], references: [id])
  costCenter   CostCenter?    @relation(fields: [costCenterId], references: [id])

  @@map("bill_items")
}

// ============================================================================
// CUSTOMERS & VENDORS
// ============================================================================

model Customer {
  id                String   @id @default(cuid())
  companyId         String
  customerNumber    String   @unique
  companyName       String
  contactName       String?
  email             String
  phone             String?
  website           String?
  taxId             String?
  creditLimit       Decimal  @default(0) @db.Decimal(15, 2)
  paymentTerms      String
  defaultCurrency   String   @default("USD")
  isActive          Boolean  @default(true)
  notes             String?
  tags              String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean  @default(false)
  version           Int      @default(1)

  // Relations
  company           Company   @relation(fields: [companyId], references: [id])
  addresses         Address[]
  contacts          Contact[]
  invoices          Invoice[]
  payments          Payment[]
  projects          Project[]
  auditLogs         AuditLog[]

  @@map("customers")
}

model Vendor {
  id                String   @id @default(cuid())
  companyId         String
  vendorNumber      String   @unique
  companyName       String
  contactName       String?
  email             String
  phone             String?
  website           String?
  taxId             String?
  creditLimit       Decimal  @default(0) @db.Decimal(15, 2)
  paymentTerms      String
  defaultCurrency   String   @default("USD")
  isActive          Boolean  @default(true)
  notes             String?
  tags              String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean  @default(false)
  version           Int      @default(1)

  // Relations
  company           Company   @relation(fields: [companyId], references: [id])
  addresses         Address[]
  contacts          Contact[]
  bills             Bill[]
  payments          Payment[]
  auditLogs         AuditLog[]

  @@map("vendors")
}

model Address {
  id            String   @id @default(cuid())
  customerId    String?
  vendorId      String?
  type          String   // BILLING, SHIPPING, BOTH
  street1       String
  street2       String?
  city          String
  state         String?
  postalCode    String
  country       String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  updatedBy     String
  isDeleted     Boolean  @default(false)
  version       Int      @default(1)

  // Relations
  customer      Customer? @relation(fields: [customerId], references: [id])
  vendor        Vendor?   @relation(fields: [vendorId], references: [id])

  @@map("addresses")
}

model Contact {
  id            String   @id @default(cuid())
  customerId    String?
  vendorId      String?
  firstName     String
  lastName      String
  email         String
  phone         String?
  mobile        String?
  title         String?
  department    String?
  isPrimary     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  updatedBy     String
  isDeleted     Boolean  @default(false)
  version       Int      @default(1)

  // Relations
  customer      Customer? @relation(fields: [customerId], references: [id])
  vendor        Vendor?   @relation(fields: [vendorId], references: [id])

  @@map("contacts")
}

// ============================================================================
// PAYMENTS
// ============================================================================

model Payment {
  id                    String        @id @default(cuid())
  companyId             String
  paymentNumber         String        @unique
  paymentDate           DateTime
  amount                Decimal       @db.Decimal(15, 2)
  currency              String        @default("USD")
  exchangeRate          Decimal       @default(1) @db.Decimal(10, 6)
  baseCurrencyAmount    Decimal       @db.Decimal(15, 2)
  paymentMethod         String
  status                PaymentStatus @default(PENDING)
  reference             String?
  notes                 String?
  customerId            String?
  vendorId              String?
  bankAccountId         String?
  transactionId         String?
  processedAt           DateTime?
  failedAt              DateTime?
  failureReason         String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  createdBy             String
  updatedBy             String
  isDeleted             Boolean       @default(false)
  version               Int           @default(1)

  // Relations
  company               Company       @relation(fields: [companyId], references: [id])
  customer              Customer?     @relation(fields: [customerId], references: [id])
  vendor                Vendor?       @relation(fields: [vendorId], references: [id])
  auditLogs             AuditLog[]

  @@map("payments")
}

// ============================================================================
// TAX & FINANCIAL
// ============================================================================

model TaxCode {
  id            String   @id @default(cuid())
  companyId     String
  code          String   @unique
  name          String
  rate          Decimal  @db.Decimal(5, 4)
  taxType       TaxType
  isCompound    Boolean  @default(false)
  isRecoverable Boolean  @default(true)
  isActive      Boolean  @default(true)
  description   String?
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  updatedBy     String
  isDeleted     Boolean  @default(false)
  version       Int      @default(1)

  // Relations
  company       Company          @relation(fields: [companyId], references: [id])
  accounts      ChartOfAccount[]

  @@map("tax_codes")
}

// ============================================================================
// PROJECTS & COST CENTERS
// ============================================================================

model Project {
  id                String   @id @default(cuid())
  companyId         String
  projectNumber     String   @unique
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime?
  status            String   @default("ACTIVE") // ACTIVE, ON_HOLD, COMPLETED, CANCELLED
  customerId        String?
  budget            Decimal  @default(0) @db.Decimal(15, 2)
  actualCost        Decimal  @default(0) @db.Decimal(15, 2)
  estimatedRevenue  Decimal  @default(0) @db.Decimal(15, 2)
  actualRevenue     Decimal  @default(0) @db.Decimal(15, 2)
  managerId         String
  teamMembers       String[]
  isActive          Boolean  @default(true)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  updatedBy         String
  isDeleted         Boolean  @default(false)
  version           Int      @default(1)

  // Relations
  company           Company           @relation(fields: [companyId], references: [id])
  customer          Customer?         @relation(fields: [customerId], references: [id])
  manager           User              @relation("ProjectManager", fields: [managerId], references: [id])
  journalEntryLines JournalEntryLine[]
  invoiceItems      InvoiceItem[]
  billItems         BillItem[]
  auditLogs         AuditLog[]

  @@map("projects")
}

model CostCenter {
  id            String   @id @default(cuid())
  companyId     String
  code          String
  name          String
  description   String?
  parentId      String?
  managerId     String?
  budget        Decimal  @default(0) @db.Decimal(15, 2)
  actualCost    Decimal  @default(0) @db.Decimal(15, 2)
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  level         Int      @default(0)
  path          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  updatedBy     String
  isDeleted     Boolean  @default(false)
  version       Int      @default(1)

  // Relations
  company           Company           @relation(fields: [companyId], references: [id])
  parent            CostCenter?       @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  children          CostCenter[]      @relation("CostCenterHierarchy")
  manager           User?             @relation("CostCenterManager", fields: [managerId], references: [id])
  journalEntryLines JournalEntryLine[]
  invoiceItems      InvoiceItem[]
  billItems         BillItem[]

  @@unique([companyId, code])
  @@map("cost_centers")
}

// ============================================================================
// AUDIT & TRACKING
// ============================================================================

model AuditLog {
  id            String   @id @default(cuid())
  companyId     String
  entityType    String
  entityId      String
  action        String
  oldValues     Json?
  newValues     Json?
  ipAddress     String?
  userAgent     String?
  sessionId     String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  updatedBy     String
  isDeleted     Boolean  @default(false)
  version       Int      @default(1)

  // Relations
  company       Company   @relation(fields: [companyId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_ACTIVATION
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
  BOOKKEEPER
  MANAGER
  VIEWER
}

enum MfaType {
  TOTP
  SMS
  EMAIL
  BACKUP_CODES
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum AccountCategory {
  CURRENT_ASSET
  FIXED_ASSET
  INTANGIBLE_ASSET
  INVESTMENT
  CURRENT_LIABILITY
  LONG_TERM_LIABILITY
  OWNER_EQUITY
  RETAINED_EARNINGS
  OPERATING_REVENUE
  NON_OPERATING_REVENUE
  OPERATING_EXPENSE
  NON_OPERATING_EXPENSE
  COST_OF_GOODS_SOLD
}

enum JournalEntryStatus {
  DRAFT
  POSTED
  APPROVED
  VOIDED
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  COMPLETED
  FAILED
  REFUNDED
}

enum TaxType {
  VAT
  SALES_TAX
  GST
  HST
}
